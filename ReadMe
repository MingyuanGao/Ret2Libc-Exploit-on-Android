                   ret2libc Exploit on Android Marshmallow 
 
    This is a simple "Return to Libc" Exploit on Android Marshmallow, i.e., 
Android 6.x. Specifically, the buffer overflow in the program overwrites the 
return address of a function with the address of a gadget, which sets the 
arguments for the C library function system() and then jump to system(). If 
Address Space Layout Randomization (ASLR) in Android Kernel is disabled, we can 
get a root shell using this expolit. Currently, the aforementioned gadget is a 
manually crafted one, rather than an existing one in system library functions. 
However, this is a good starting point for 1) seeking ret2libc gadgets in system
library functions, and 2) exploring how ASLR can leak security information.  

Contents
========
    1. Set up the Development Environment for Android Native Applications
    2. Compile the Exploit Program 
    3. Adjust the Exploit Program 
    4. Run the Exploit Program
    Appendix 

NOTE 
==== 
    This guide has been tested on Samsung Galaxy S7 (SMG930FD), which runs 
Android 6.0.1 and is rooted. 

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


1. Set up the Development Environment for Android Native Applications
=====================================================================
1.1 [Host] Make Standalone Toolchain from Android NDK
-----------------------------------------------------
Reference: http://developer.android.com/ndk/guides/standalone_toolchain.html

# Under dir NDK_TOP_DIR/build/tools
$ ./make-standalone-toolchain.sh --arch=arm --platform=android-23 \
  --ndk-dir=NDK_TOP_DIR --install-dir=arm-linux-androideabi 

# Check whether the newly generated toolchain contains arm-linux-androideabi-gdb
# If not, download it from https://android.googlesource.com/
# and place it in the "bin" dir under the top dir of the new toolchain

1.2 [Target] Copy gdbserver to Device
-------------------------------------
# Under dir NDK_TOP_DIR/prebuilt/android-arm/gdbserver/gdbserver
$ adb push gdbserver /sdcard/


2. Compile the Exploit Program
===============================
2.1 Compile the Program
-----------------------
# Modify the Makefile so that the standalone toolchain can be found by make
# Under project top dir
$ make

2.2 Copy ret2libc Program to Device
-----------------------------------
# Under Project Top Dir
$ adb push ret2libc /sdcard/


3. Adjust the Exploit Program
=============================
3.1 [Target] Disable ASLR in Android Kernel
-------------------------------------------
$ adb shell
$ su root
$ echo 0 > /proc/sys/kernel/randomize_va_space

3.2 [Target] Start the Expliot Program on GDB Server
----------------------------------------------------
$ mkdir /data/test
$ cp /sdcard/gdbserver /data/test/
$ cp /sdcard/ret2libc /data/test/
$ cd /data/test
$ ./gdbserver :1234 ret2libc

3.3 [Host] Get Required Addresses in the Expliot Program on Your Device 
-----------------------------------------------------------------------
# Make GDB Disassembler working correctly 
# Pull libc.so from Device to dir that holds "ret2libc"
$ adb pull /system/lib/libc.so .

$ adb forward tcp:1234 tcp:1234

$ arm-linux-androideabi-gdb ret2libc
(gdb) set solib-search-path /NDK_TOP_DIR/platforms/android-23/arch-arm/usr/lib/
(gdb) target remote :1234
(gdb) b main
(gdb) b bof
(gdb) c
(gdb) s
(gdb) info reg r11
(gdb) p set_regs
(gdb) p system
(gdb) p exit
(gdb) s
(gdb) q

NOTE 
1) The following addresses are needed: a valid address in the running program
   that will be the bp for set_regs and system, set_regs, system, exit, and 
   address of string "/system/bin/sh". 
2) Check the output of "info sharedlibrary", and pull more libraries from device
   to host as needed.


3.4 Recompile the Expliot Program
---------------------------------
Replace the addresseses of set_regs, system and exit in ret2libc.c with the 
new ones found in 3.3

# Under Project Top Dir
$ make
$ adb push ret2libc /sdcard/
$ adb shell 
$ su root
$ cp /sdcard/ret2libc /data/test/
$ exit
$ exit

4. Run the Exploit Program
==========================
4.1 [Target] Disable ASLR
-------------------------
$ adb shell 
$ su root
$ echo 0 > /proc/sys/kernel/randomize_va_space

4.2 [Target] Start the Program
------------------------------
# If everything goes well, you will get a root shell
$ cd /data/test
$ ./ret2libc
$ exit
$ exit


Appendix
========
A1. Set GDB Disassembler 
------------------------
(gdb) show arm disassembler
(gdb) set arm disassembler xxx

(gdb) show arm apcs32
(gdb) set arm apcs32 xxx

